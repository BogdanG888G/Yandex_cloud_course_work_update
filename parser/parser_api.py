import datetime
import requests
import json
import pandas as pd
from retry import retry
import psycopg2
from urllib.parse import urlparse
from fastapi import FastAPI
from pydantic import BaseModel
import asyncio
import os

app = FastAPI()

def clean_text(text):
    """–û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –±–∏—Ç—ã—Ö –±–∞–π—Ç–æ–≤"""
    if text is None:
        return None
    try:
        if not isinstance(text, str):
            text = str(text)
        text = ''.join(c for c in text if c.isprintable() or c.isspace()).strip()
        return text.encode('utf-8', errors='replace').decode('utf-8', errors='replace')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e} | –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {repr(text)}")
        return None

def save_to_postgres(data: list):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL —Å —Ä–∞—Å—á—ë—Ç–æ–º —Å–∫–∏–¥–∫–∏ –∏ —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç–æ–ª–±—Ü–æ–≤"""
    print(f"üîÑ –ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {len(data)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î...")
    conn = None
    try:
        conn = psycopg2.connect(
            host="parser_postgres",
            port=5432,
            database="goods_db",
            user="goods_user",
            password="goods_password",
            client_encoding='utf-8'
        )
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
        cur = conn.cursor()

        cur.execute("DROP TABLE IF EXISTS wb_goods;")
        conn.commit()

        cur.execute("""
            CREATE TABLE wb_goods (
                –∞—Ä—Ç–∏–∫—É–ª TEXT PRIMARY KEY,
                –Ω–∞–∑–≤–∞–Ω–∏–µ TEXT,
                —Ü–µ–Ω–∞ INTEGER,
                —Ü–µ–Ω–∞_—Å–æ_—Å–∫–∏–¥–∫–æ–π INTEGER,
                —Ä–∞—Å—á—ë—Ç–Ω–∞—è_—Å–∫–∏–¥–∫–∞ FLOAT,
                –∫—ç—à–±–µ–∫ INTEGER,
                —Å–∫–∏–¥–∫–∞ INTEGER,
                –±—Ä–µ–Ω–¥ TEXT,
                —Ä–µ–π—Ç–∏–Ω–≥_—Ç–æ–≤–∞—Ä–∞ FLOAT,
                –ø—Ä–æ–¥–∞–≤–µ—Ü TEXT,
                —Ä–µ–π—Ç–∏–Ω–≥_–ø—Ä–æ–¥–∞–≤—Ü–∞ FLOAT,
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤ INTEGER,
                —Ä–µ–π—Ç–∏–Ω–≥_–ø–æ_–æ—Ç–∑—ã–≤–∞–º FLOAT,
                –ø—Ä–æ–º–æ_—Ç–µ–∫—Å—Ç_–≤_–∫–∞—Ä—Ç–æ—á–∫–µ TEXT,
                –ø—Ä–æ–º–æ_—Ç–µ–∫—Å—Ç_–≤_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ TEXT,
                —Å—Å—ã–ª–∫–∞ TEXT
            );
        """)
        conn.commit()
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ wb_goods —Å–æ–∑–¥–∞–Ω–∞")

        for item in data:
            try:
                price = int(item.get('price', 0) or 0)
                sale_price = int(item.get('salePriceU', 0) or 0)
                discount_calc = round((price - sale_price) / price * 100, 2) if price else 0.0

                cleaned_item = (
                    str(clean_text(item.get('id', ''))),
                    clean_text(item.get('name', '')),
                    price,
                    sale_price,
                    discount_calc,
                    int(item.get('cashback', 0) or 0),
                    int(item.get('sale', 0) or 0),
                    clean_text(item.get('brand', '')),
                    float(item.get('rating', 0.0) or 0.0),
                    clean_text(item.get('supplier', '')),
                    float(item.get('supplierRating', 0.0) or 0.0),
                    int(item.get('feedbacks', 0) or 0),
                    float(item.get('reviewRating', 0.0) or 0.0),
                    clean_text(item.get('promoTextCard', '')),
                    clean_text(item.get('promoTextCat', '')),
                    clean_text(item.get('link', ''))
                )

                cur.execute("""
                    INSERT INTO wb_goods VALUES (
                        %s, %s, %s, %s, %s, %s, %s, 
                        %s, %s, %s, %s, %s, %s, %s, %s, %s
                    )
                    ON CONFLICT (–∞—Ä—Ç–∏–∫—É–ª) DO UPDATE SET 
                        –Ω–∞–∑–≤–∞–Ω–∏–µ = EXCLUDED.–Ω–∞–∑–≤–∞–Ω–∏–µ,
                        —Ü–µ–Ω–∞ = EXCLUDED.—Ü–µ–Ω–∞,
                        —Ü–µ–Ω–∞_—Å–æ_—Å–∫–∏–¥–∫–æ–π = EXCLUDED.—Ü–µ–Ω–∞_—Å–æ_—Å–∫–∏–¥–∫–æ–π,
                        —Ä–∞—Å—á—ë—Ç–Ω–∞—è_—Å–∫–∏–¥–∫–∞ = EXCLUDED.—Ä–∞—Å—á—ë—Ç–Ω–∞—è_—Å–∫–∏–¥–∫–∞,
                        –∫—ç—à–±–µ–∫ = EXCLUDED.–∫—ç—à–±–µ–∫,
                        —Å–∫–∏–¥–∫–∞ = EXCLUDED.—Å–∫–∏–¥–∫–∞,
                        –±—Ä–µ–Ω–¥ = EXCLUDED.–±—Ä–µ–Ω–¥,
                        —Ä–µ–π—Ç–∏–Ω–≥_—Ç–æ–≤–∞—Ä–∞ = EXCLUDED.—Ä–µ–π—Ç–∏–Ω–≥_—Ç–æ–≤–∞—Ä–∞,
                        –ø—Ä–æ–¥–∞–≤–µ—Ü = EXCLUDED.–ø—Ä–æ–¥–∞–≤–µ—Ü,
                        —Ä–µ–π—Ç–∏–Ω–≥_–ø—Ä–æ–¥–∞–≤—Ü–∞ = EXCLUDED.—Ä–µ–π—Ç–∏–Ω–≥_–ø—Ä–æ–¥–∞–≤—Ü–∞,
                        –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤ = EXCLUDED.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤,
                        —Ä–µ–π—Ç–∏–Ω–≥_–ø–æ_–æ—Ç–∑—ã–≤–∞–º = EXCLUDED.—Ä–µ–π—Ç–∏–Ω–≥_–ø–æ_–æ—Ç–∑—ã–≤–∞–º,
                        –ø—Ä–æ–º–æ_—Ç–µ–∫—Å—Ç_–≤_–∫–∞—Ä—Ç–æ—á–∫–µ = EXCLUDED.–ø—Ä–æ–º–æ_—Ç–µ–∫—Å—Ç_–≤_–∫–∞—Ä—Ç–æ—á–∫–µ,
                        –ø—Ä–æ–º–æ_—Ç–µ–∫—Å—Ç_–≤_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ = EXCLUDED.–ø—Ä–æ–º–æ_—Ç–µ–∫—Å—Ç_–≤_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏,
                        —Å—Å—ã–ª–∫–∞ = EXCLUDED.—Å—Å—ã–ª–∫–∞;
                """, cleaned_item)

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {item.get('id')}: {e}")
                print("–ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:", cleaned_item)
                if conn:
                    conn.rollback()
                continue
        conn.commit()
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

    except psycopg2.OperationalError as oe:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {oe}")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()

def save_to_db(data: list):
    save_to_postgres(data)

def get_catalogs_wb() -> dict:
    url = 'https://static-basket-01.wbbasket.ru/vol0/data/main-menu-ru-ru-v3.json'
    headers = {'Accept': '*/*', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'}
    return requests.get(url, headers=headers).json()

def get_data_category(catalogs_wb: dict) -> list:
    catalog_data = []
    if isinstance(catalogs_wb, dict) and 'childs' not in catalogs_wb:
        catalog_data.append({
            'name': f"{catalogs_wb['name']}",
            'shard': catalogs_wb.get('shard', None),
            'url': catalogs_wb['url'],
            'query': catalogs_wb.get('query', None)
        })
    elif isinstance(catalogs_wb, dict):
        catalog_data.append({
            'name': f"{catalogs_wb['name']}",
            'shard': catalogs_wb.get('shard', None),
            'url': catalogs_wb['url'],
            'query': catalogs_wb.get('query', None)
        })
        catalog_data.extend(get_data_category(catalogs_wb['childs']))
    else:
        for child in catalogs_wb:
            catalog_data.extend(get_data_category(child))
    return catalog_data

def search_category_in_catalog(url: str, catalog_list: list) -> dict:
    path = urlparse(url).path.rstrip('/')
    best_match = None
    for catalog in catalog_list:
        if path.endswith(catalog['url'].rstrip('/')):
            print(f'–Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {catalog["name"]}')
            return catalog
        if catalog['url'].rstrip('/') in path:
            best_match = catalog
    if best_match:
        print(f'–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω–æ: {best_match["name"]}')
        return best_match
    print("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω.")
    return None

def get_data_from_json(json_file: dict) -> list:
    data_list = []
    for data in json_file['data']['products']:
        sku = data.get('id')
        name = data.get('name')
        price = int(data.get("priceU") / 100)
        salePriceU = int(data.get('salePriceU') / 100)
        cashback = data.get('feedbackPoints')
        sale = data.get('sale')
        brand = data.get('brand')
        rating = data.get('rating')
        supplier = data.get('supplier')
        supplierRating = data.get('supplierRating')
        feedbacks = data.get('feedbacks')
        reviewRating = data.get('reviewRating')
        promoTextCard = data.get('promoTextCard')
        promoTextCat = data.get('promoTextCat')
        data_list.append({
            'id': sku,
            'name': name,
            'price': price,
            'salePriceU': salePriceU,
            'cashback': cashback,
            'sale': sale,
            'brand': brand,
            'rating': rating,
            'supplier': supplier,
            'supplierRating': supplierRating,
            'feedbacks': feedbacks,
            'reviewRating': reviewRating,
            'promoTextCard': promoTextCard,
            'promoTextCat': promoTextCat,
            'link': f'https://www.wildberries.ru/catalog/{data.get("id")}/detail.aspx?targetUrl=BP'
        })
    return data_list

@retry(Exception, tries=-1, delay=0)
def scrap_page(page: int, shard: str, query: str, low_price: int, top_price: int, discount: int = None) -> dict:
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0)"}
    url = f'https://catalog.wb.ru/catalog/{shard}/catalog?appType=1&curr=rub' \
          f'&dest=-1257786' \
          f'&locale=ru' \
          f'&page={page}' \
          f'&priceU={low_price * 100};{top_price * 100}' \
          f'&sort=popular&spp=0' \
          f'&{query}' \
          f'&discount={discount}'
    r = requests.get(url, headers=headers)
    print(f'–°—Ç–∞—Ç—É—Å: {r.status_code} –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –ò–¥–µ—Ç —Å–±–æ—Ä...')
    return r.json()

def save_excel(data: list, filename: str):
    try:
        df = pd.DataFrame(data)
        if df.empty:
            print("DataFrame –ø—É—Å—Ç–æ–π, –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.")
            return
        df.to_excel(f"{filename}.xlsx", index=False)
        print(f"‚úÖ –í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {filename}.xlsx")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

def parser(url: str, low_price: int = 1, top_price: int = 1000000, discount: int = 0):
    catalog_data = get_data_category(get_catalogs_wb())
    try:
        category = search_category_in_catalog(url=url, catalog_list=catalog_data)
        data_list = []
        for page in range(1, 51):
            data = scrap_page(
                page=page,
                shard=category['shard'],
                query=category['query'],
                low_price=low_price,
                top_price=top_price,
                discount=discount)
            print(f'–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(get_data_from_json(data))}')
            if len(get_data_from_json(data)) > 0:
                data_list.extend(get_data_from_json(data))
            else:
                break
        print(f'–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–±—Ä–∞–Ω–æ: {len(data_list)} —Ç–æ–≤–∞—Ä–æ–≤.')
        save_to_db(data_list)
        save_excel(data_list, f'{category["name"]}_from_{low_price}_to_{top_price}')
        print(f'–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {url}?priceU={low_price * 100};{top_price * 100}&discount={discount}')
    except TypeError:
        print('–û—à–∏–±–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω —Ä–∞–∑–¥–µ–ª. –£–¥–∞–ª–∏—Ç–µ –≤—Å–µ –¥–æ–ø —Ñ–∏–ª—å—Ç—Ä—ã —Å —Å—Å—ã–ª–∫–∏')
    except PermissionError:
        print('–û—à–∏–±–∫–∞! –í—ã –∑–∞–±—ã–ª–∏ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ excel —Ñ–∞–π–ª. –ó–∞–∫—Ä–æ–π—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')

class ParseRequest(BaseModel):
    url: str
    low: int = 1
    high: int = 1000000
    discount: int = 0

@app.post("/parse")
async def parse_endpoint(req: ParseRequest):
    try:
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, parser, req.url, req.low, req.high, req.discount)
        return {"status": "ok"}
    except Exception as e:
        return {"status": "error", "detail": str(e)}

if __name__ == '__main__':
    url = os.getenv('URL')
    low_price = int(os.getenv('LOW', 0))
    top_price = int(os.getenv('HIGH', 1000000))
    discount = int(os.getenv('DISCOUNT', 0))
    if not url:
        raise ValueError("URL –Ω–µ —É–∫–∞–∑–∞–Ω!")
    start = datetime.datetime.now()
    parser(url=url, low_price=low_price, top_price=top_price, discount=discount)
    end = datetime.datetime.now()
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end - start}")
