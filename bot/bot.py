import os
from dotenv import load_dotenv
load_dotenv()

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import aiohttp

user_states = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_states[update.effective_user.id] = {"step": 0, "params": []}
    await update.message.reply_text(
        "üëã *–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî WB –ü–∞—Ä—Å–µ—Ä –ë–æ—Ç.*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞ Wildberries –ø–æ:\n"
        "‚ñ™Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏\n‚ñ™Ô∏è –¶–µ–Ω–µ\n‚ñ™Ô∏è –°–∫–∏–¥–∫–µ\n\n"
        "üîç –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é WB, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–Ω—ë–º –∞–Ω–∞–ª–∏–∑.\n"
        "_–ü—Ä–∏–º–µ—Ä: https://www.wildberries.ru/catalog/elektronika/igry-i-razvlecheniya/aksessuary/garnitury_",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    state = user_states.get(user_id, {"step": 0, "params": []})

    try:
        if state["step"] == 0:  # URL
            if "wildberries.ru/catalog" not in text:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ WB. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return
            state["params"].append(text)
            state["step"] = 1
            user_states[user_id] = state
            await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ *–Ω–∏–∂–Ω—é—é* –≥—Ä–∞–Ω–∏—Ü—É —Ü–µ–Ω—ã (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", parse_mode="Markdown")

        elif state["step"] == 1:  # –ù–∏–∂–Ω—è—è —Ü–µ–Ω–∞
            if not text.isdigit():
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
                return
            state["params"].append(int(text))
            state["step"] = 2
            user_states[user_id] = state
            await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ *–≤–µ—Ä—Ö–Ω—é—é* –≥—Ä–∞–Ω–∏—Ü—É —Ü–µ–Ω—ã (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", parse_mode="Markdown")

        elif state["step"] == 2:  # –í–µ—Ä—Ö–Ω—è—è —Ü–µ–Ω–∞
            if not text.isdigit():
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
                return
            state["params"].append(int(text))
            state["step"] = 3
            user_states[user_id] = state
            await update.message.reply_text("üîª –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É (0-100):")

        elif state["step"] == 3:  # –°–∫–∏–¥–∫–∞
            if not text.isdigit() or not (0 <= int(text) <= 100):
                await update.message.reply_text("‚ùå –°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100%! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return

            state["params"].append(int(text))
            user_states[user_id] = state
            url, low, high, discount = state["params"]

            await update.message.reply_text("‚è≥ *–ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–µ—Ä...*", parse_mode="Markdown")

            async with aiohttp.ClientSession() as session:
                try:
                    async with session.post(
                        "http://parser_api:8050/parse",
                        json={"url": url, "low": low, "high": high, "discount": discount}
                    ) as resp:
                        data = await resp.json()
                        if data.get("status") == "ok":
                            await update.message.reply_text(
                                "‚úÖ *–ü–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!*\n\n"
                                "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                                "[–û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥](http://158.160.124.117:8088/superset/dashboard/p/P4WnyelQorV/)",
                                parse_mode="Markdown"
                            )
                        else:
                            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {data.get('detail')}")
                except Exception as e:
                    await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –ø–∞—Ä—Å–µ—Ä–∞: {str(e)}")

            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            user_states[user_id] = {"step": 0, "params": []}
            await update.message.reply_text(
                "üîÅ *–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?*\n–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é WB:",
                parse_mode="Markdown"
            )

    except Exception as e:
        await update.message.reply_text(f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    token = os.getenv("BOT_TOKEN")
    if not token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
    else:
        print(f"‚úÖ BOT_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω: {token[:10]}...")

    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
